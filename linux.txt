-- cd 

change directory
다른 디렉토리로 이동하는 명령어
- 최상위 디렉토리 /(root)로 이동
cd /
- /home으로 이동
cd /home
- 현재위치 기준 상위로 이동
cd ..
- 오라클 유저의 홈디렉토리로 이동
cd 
- 방금 있었던 곳으로 이동
cd -



-- pwd

Print Working Directory
현재 내가 있는 디렉토리 확인



-- ls

list 약자
현재 디렉토리에 있는 폴더와 파일 확인
파란색으로 표시된 것은 폴더



-- touch

- 파일 용량이 0인 파일 생성
touch a1.txt
- 용량이 0인 다수 파일 생성
touch a1.txt b1.txt c1.txt 



-- mkdir 

디렉토리를 만드는 명령어
mkdir (디렉토리명)

디렉토리를 만들면서 한번에 하위 디렉토리를 생성하는 옵션
mkdir -p test2/test3/test4/test5

두개의 디렉토리 한번에 생성
mkdir test100 test200
(현재 디렉토리에서 하위 폴더 2개를 각각 생성)


-- man (명령어)

매뉴얼을 보는 명령어
q를 누르면 빠져나옴



-- rm 명령어

파일이나 디렉토리를 삭제하는 명령어
/ 리눅스나 유닉스는 휴지통이 없기 때문에 삭제할 때 특히 주의

- 확장자가 .txt인 파일 전부 삭제
rm *.txt

- 현재 디렉토리 밑에 있는 모든 파일과 디렉토리 삭제(위험)
rm -rf *

-r 옵션 : 현재 디렉토리 밑에 있는 모든 파일과 디렉토리까지 전부 삭제하겠다.
-f 옵션 : 원래는 삭제할 것인지 묻고 삭제하지만, 묻지말고 지워라



-- rmdir
디렉토리를 삭제하는 명령어



-- dir 명령어
파일 이동시?
예. d:\에 위치한 emp.txt파일을 리눅스로 전송하기 위해서는
1. cmd창에서 d:\위치로 이동
2. dir emp.txt



-- alias 명령어

자주 수행하는 명령어들을 쉽게 사용할 수 있도록 설정하는 명령어
- 오라클에 scott으로 접속하는 명령어설정
alias scott="sqlplus scott/tiger"
- 이후 scott이라고 입력하면 접속

- 파이썬에 접속하는 명령어 p
alias p="python"

- 명령어 p 삭제
unalias p



-- cat 명령어

파일의 내용을 출력
- emp.txt 파일의 내용을 출력
cat emp.txt



-- more 명령어

cat은 파일 내용 전체를 한번에 로딩/ more은 단계적으로 로딩
전진키 : space / 후진키 : b / 페이지 단위 로딩 : f
q로 탈출


-- redirection 명령어

화면에 출력되는 결과를 파일로 저장하는 명령어
>> : 없으면 파일을 생성하고 있으면 기존 파일뒤에 덧붙이겠다.
> : 파일을 생성하겠다. 기존 파일이 있으면 덮어쓰겠다.
cat emp.txt >> emp_backup.txt


-- head 명령어

문서의 처음 몇줄을 화면에 출력하는 명령어
head -출력줄수 파일명
head -20 winter.txt


-- wc 명령어

파일 안에 단어의 개수 또는 라인 수를 출력하는 명령어
wc -l 파일명
wc -l winter.txt

-l : 라인 수 출력
-w : 단어의 개수 출력
-c : 문자 수 출력



-- pipe 명령어

앞의 명령어 | 뒤 명령어
앞 명령어의 출력을 뒤 명령어의 입력으로 보냄으로써 명령어의 실행결과를 다음 명령어로 전달



-- grep 명령어

파일안에 포함된 특정 단어나 구문을 검색하는 명령어
grep '찾고싶은 단어' 파일명

grep 'SCOTT' emp.txt

- 대소문자 구분 없이 검색
grep -i 'scott' emp.txt
- salesman 줄세기
grep -i 'salesman' emp.txt | wc -l
- 단어별로 검색
grep -iw '10' emp.txt




-- awk 명령어

awk '패턴 {action}' 대상 파일명
- salesman 이름, 월급 출력
awk '$3=="SALESMAN"{print $2,$3}' emp.txt
grep -i 'salesman' emp.txt | awk '{print $2,$3}'
- 81년 입사 사원 이름 입사일
awk 'substr($5,3,2) == "81" {print $2,$5 }' emp.txt
- 이름 첫글자 A
awk 'substr($2,1,1)=="A" {print $2,$6}' emp.txt
awk '{print $2,$6}' emp.txt | grep -i '^a'   <- 이름과 월급만 뽑은 후 A로 시작하는 열만 출력
- 이름 끝글자 T
awk ' {print $2}' emp.txt | grep -i 'T$'



-- sort 명령어

특정 컬럼을 기준으로 정렬하는 명령어
- 6번째 열을 기준으로 ascending하게 정렬
sort -k 6 emp.txt
- 6번째 열을 기준으로 descending하게 정렬
sort -rk 6 emp.txt
- 기본 값은 아스키 코드 값 비교/ 숫자임을 명시할 때
sort -nrk 6 emp.txt
- salesman/ 이름, 월급 출력/ 월급 높은 순
awk '$3=="SALESMAN" {print $2, $6}' emp.txt| sort -nrk 2
sort -nrk 6 emp.txt| awk '$3=="SALESMAN" {print $2,$6}'



-- 특정 컬럼의 총합

- 월급의 총합
awk ' {print $6}' emp.txt | awk ' {sum+=$1} END {print sum}'



-- uniq 명령어

중복된 라인을 제거하는 명령어
uniq 옵션 파일명
- 직업을 abcd순으로 정렬(중복제거)
awk ' {print $3}' emp.txt | sort -k 1 | uniq
- 부서번호 중복제거 출력
awk ' {print $8}' emp.txt | sort -k 1 | uniq
- 중복된 라인만 출력( uniq -d )
awk ' {print $3}' emp.txt | sort -k 1 | uniq -d



-- 값을 입력받고 변수로 사용할 때

vi 편집기에 들어가서

echo -n " ~~ : "
read deptno
awk -v a=$deptno '$2==a {print $2,"의 월급은 ",$6}' emp.txt
awk에 -v 옵션 준 이후에 쓰는 변수는 다시 사용할 때 $를 붙이지 않고 씀
read 이후에 echo를 통해 값을 입력받을 변수명을 지정해주고 이후에 사용할 때는 $를 붙여서 사용해야한다.


-- 리눅스 서버에서 한글 인식하도록 설정

export LANG="ko_KR.UTF-8"
켤때마다 자동으로 한글 안깨지게 설정하는 방법
1. ls -l .bash_profile 확인
2. vi. bash_profile 열고
3. 맨 아랫줄에 아래와 같이 입력
export LANG="ko_KR.UTF-8"
4. 저장 후 종료
5.  . .bash_profile 실행 후 에러 안나면 완료


-- vi 편집기 관련 명령어

dd 한줄 삭제
u 방금했던 작업 취소
x 철자 한개 삭제
:wq! 저장하고 종료하겠다.(ZZ)
:q! 저장안하고 종료하겠다(ZQ)
j 아래로 이동
k 위로 이동
h 왼쪽으로 이동
l 오른쪽으로 이동
1G 맨위로 이동
G 맨 아래로 이동
:set nu 파일 내에서 텍스트에 줄번호 표시
:set nonu 줄번호 없애기
gg 맨위로 이동
- 1~200 번 줄까지의 내용을 winter200.txt라는 이름으로 저장하겠다.
:1, 200 w winter200.txt
dw 커서에 있는 단어 삭제
- 5~10 번 줄 삭제
:5, 10 d
D 커서 오른쪽행 삭제
yy 하나의 행 복사
p 붙여넣기
yG 현재행부터 파일끝까지 복사
- 1~2행을 3행 다음으로 복사(범위 사이 지점에 복사 가능)
:1,2 co 3
- 1~2행을 3행 다음으로 이동(범위 사이 지점에 이동 불가)
:1,2 m 3
- 편집기 내에서 특정 문자 검색
:/문자 (ex. :/ANNA)
n을 누르면 계속 검색
shift n을 누르면 뒤로 검색
- 문자 변경
:%s/기존문자/변경문자
- 여러개 변경
:%s/기존문자/변경문자/g




-- 직업을 묻고/ 해당직업 이름, 월급 출력
echo -n "직업: "
read job
grep -i $job emp.txt | awk ' {print $2, $6}'
//수업때는 마지막줄을 아래가로로 썼는데 굳이 변수에 받아주지 않아도 출력 됨.
(enamesal=`grep -i $job emp.txt| awk '{print $2,$6}'`
echo "$enamesal") 




-- emp.txt 와 dept.txt 동시에 사용해서 이름입력하면 부서위치 출력하게 

echo -n "사원 이름 : "
read name
deptno=`grep -i $name emp.txt | awk ' {print $8}'`
loc=`awk -v a=$deptno '$1==a {print $3}' dept.txt`
echo "$loc에서 근무하는 사원"

deptno 변수를 바로 awk 조건 안에 쓸수 없어서 -v조건 이후 a변수 재지정 후 사용




-- diff 명령어

두 파일간의 차이점을 찾아서 알려주는 명령어
diff 파일명1 파일명2
결과로 < 뒤에 나온 데이터는 파일명1에만 있는 데이터/  > 뒤에 나온데이터는 파일명2에만 있는 데이터




-- find 명령어

검색하고자 하는 파일을 찾을 때  사용하는 명령어 (설정한 디렉토리 하위에 있는 모든 디렉토리에서 찾아서 출력)
find (검색할 디렉토리) -name (검색할 파일명) -print
예.
find /home/oracle -name emp.txt -print
find /home/oracle -maxdepth 1 -name emp.txt -print => 현재 디렉토리만 확인
find /home/oracle -maxdepth 2 -name emp.txt -print => 현재 하위 한개 디렉토리까지 확인



-- tar 명령어

파일을 압축하고 해제하는 명령어
1. 압축 
tar cvf 압축파일명 압축파일대상
2. 해제
tar xvf 압축파일명 압축해제 위치

옵션
c (compress) : 여러개의 파일을 하나로 만들어라
v (view) : 압축되는 과정을 보여달라
f (file) : 생성되는 파일명 지정
x (extract) : 묶여있는 파일을 풀어줘라
-C : 압축이 풀릴 위치를 지정

- 현재 디렉토리에 있는 emp로 시작하는 모든 txt파일을 empall.tar로 압축
tar cvf empall.tar ./emp*.txt
- /home/oracle/test77 디렉토리에 압축해제
tar xvf empall.tar -C /home/oracle/test77



-- ln(link) 명령어

윈도우의 바로가기 기능과 유사
내가 자주 열어봐야 할 파일이 있다면 바로가기를 생성해 놓으면 편하게 열어 볼 수 있다.

ln -s "링크를 걸 파일위치와 파일명" "바로가기 이름"
ln -s ./test99/emp.txt emp99.txt
cat emp99.txt


-- sed 명령어
grep은 특정 내용을 검색만 한다면, sed 명령어는 검색 뿐만 아니라 내용변경이 가능
실제로 내용이 변경되는 것은 아니고 변경해서 보여주기만 하는 것


-- case 문
if와 유사한 리눅스의 쉘 스크립트 명령어

## 자동화 스크립트 기초
echo " "
read choice
case $choice in
1) 
  sh /home/oracle/diff/sh ;;
2)
  sh /home/oracle/find_file.sh;;
esac
- case문으로 시작했으면 esac으로 종료
- case와 in 사이에 변수명을 사용하고 변수에 들어가는 숫자에 해당하는 아래 스크립트 실행


-- 리눅스에서 파이썬 코드 실행
vi find_ename.py
python find_ename.py


-- oracle db에서 csv 파일을 추출하기 위한 sqlplus 명령어들

sqlplus에 들어간 후
set colsep ','         컬럼 사이에 ,가 붙어서 출력
set sqlprompt ""     sql 프롬프트 없애기 
set heading off      컬렴명 출력 안됨

set trimspool on
spool dept.csv
select * from dept;
spool off

- 쉘스크립트에서 수행하기 위한 스크립트
echo -n "테이블 명 :"
read tb

sqlplus scott/tiger << EOF

set colsep ','
set sqlprompt ""
set heading off
set trimspool on
spool $tb.csv
select * from $tb;
spool off
EOF


-- cp 명령어

파일을 복사하는 명령어
- cp 기존파일명 복사할파일명
- cp (위치/기존파일명) (위치/복사할파일명)
- /home/oracle 밑에 .txt파일은 전부 /home/oracle/backup 폴더에 복사
cp /home/oracle/*.txt /home/oracle/backup/
cp *.txt ./backup/
이때는 파일명을 지정하지 않아서 같은 이름으로 다른경로에 저장

리눅스는 휴지통이 없으므로 중요한 데이터는 반드시 cp 명령어로 백업

- emp1.txt~emp20.txt 복사
sh 작성
i=1
while [ $i -le 20 ]
do
cp emptxt emp$i.txt
let i=$(($i+1))
done


-- mv 명령어
파일의 이름을 바꾸거나 파일을 다른 디렉토리로 이동하는 명령어

mv 기존파일명 새로운파일명
- /home/oracle에 있는 emp로 시작하는 .txt파일을 전부 home/oracle/backup으로 이동
mv emp*.txt ./backup



-- 숫자열비교
1. 숫자1 -eq 숫자2: 두 숫자가 같으면 true
2. 숫자1 -ne 숫자2 : 두 숫자가 같지 않으면 true
3. 숫자1 -gt 숫자2 : 숫자1이 숫자2보다 크다면 true
4. 숫자1 -ge 숫자2 : 숫자1이 숫자2보다 크거다 같다면 true
5. 숫자1 -lt 숫자2 : 숫자1이 숫자2보다 작다면 true
6. 숫자1 -le 숫자2 : 숫자1이 숫자2보다 작거나 같다면 true
7. !숫자1 : 숫자1이 거짓이라면 true


-- 많은 파일에서 내용을 변경하려고 할 때

:argdo %s/SALESMAN/jjj/g | update



